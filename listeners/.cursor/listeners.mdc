---
description: 
globs: *.sol
alwaysApply: false
---
# Sim Idx Project Rules

Read the docs from here https://docs.sim.dune.com/llms-full.txt

## Framework Overview
- Sim idx is Dune's blockchain event indexing framework
- Projects have two main components: Solidity listeners and TypeScript APIs  
- Listeners hook into blockchain events, APIs serve indexed data

## Project Structure
- `listeners/` - Solidity contracts for event listening
- `apis/` - TypeScript APIs using Hono + Drizzle
- `abis/` - Contract ABI files for code generation
- `sim.toml` - Project configuration

## Solidity Listener Patterns

### Contract Structure
- Main contract extends `BaseTriggers` with `triggers()` function
- Listener contracts implement generated event interfaces (e.g., `mUSDC$OnMintEvent`)
- Always import: `import "sim-idx-sol/Simidx.sol";` and `import "sim-idx-generated/Generated.sol";`

### Event Handling
- Event handlers receive `EventContext` and typed params struct
- Use `EventContext` to access transaction/block data: `ctx.txn.hash()`, `ctx.txn.chainId`
- When you are handling an event, the events params are in generated structs: `inputs.minter`, `inputs.mintAmount`
- Emit custom events or call external functions in handlers

### Trigger Registration
```solidity
// Register event triggers
addTrigger(
    ChainIdContract(chainId, contractAddress),
    listener.triggerOnEventName()
);

// Register function triggers  
addTrigger(
    ChainIdContract(chainId, contractAddress),
    listener.triggerOnFunctionName()
);
```

### Context Usage
- `ctx.txn.hash()` - transaction hash
- `ctx.txn.chainId` - chain ID
- `ctx.txn.call.caller` - transaction sender
- `ctx.txn.call.callee` - contract being called
- `block.number`, `block.timestamp` - block data

### Development Workflow
- Generated code is in `lib/sim-idx-generated/`  
- Never edit generated files directly
- Test listeners with Foundry: `forge test`
